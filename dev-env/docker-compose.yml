version: '3.9'
name: dev_deployment_controller

volumes:
 deployment_controller_dev_escerts:
   driver: local
 deployment_controller_dev_esdata:
   driver: local
 deployment_controller_dev_kibanadata:
   driver: local
 deployment_controller_dev_metricbeatdata:
   driver: local
 deployment_controller_dev_filebeatdata:
   driver: local
 deployment_controller_dev_logstashdata:
   driver: local

services:
  proxy:
    container_name: deployment_controller_dev_proxy
    build:
        context: .
        dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: no
    tty: true

# thanks to my brother at elastic: https://www.elastic.co/blog/getting-started-with-the-elastic-stack-and-docker-compose
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: deployment_controller_dev_setup
    volumes:
      - deployment_controller_dev_escerts:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: elastic_dev\n"\
         "    dns:\n"\
         "      - elastic\n"\
         "      - localhost\n"\
         "      - elastic.michu-tech-dev.net\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana_dev\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "      - kibana.michu-tech-dev.net\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://elastic:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elastic:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elastic_dev/elastic_dev.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 60

  elastic:
    depends_on:
      setup:
          condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: deployment_controller_dev_elastic
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - deployment_controller_dev_escerts:/usr/share/elasticsearch/config/certs
      - deployment_controller_dev_esdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=deployment_controller_dev_elastic
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elastic_dev/elastic_dev.key
      - xpack.security.http.ssl.certificate=certs/elastic_dev/elastic_dev.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elastic_dev/elastic_dev.key
      - xpack.security.transport.ssl.certificate=certs/elastic_dev/elastic_dev.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
        memlock:
          soft: -1
          hard: -1
    healthcheck:
        test: [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
          ]
        interval: 10s
        timeout: 10s
        retries: 60

  kibana:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: deployment_controller_dev_kibana
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - deployment_controller_dev_escerts:/usr/share/kibana/config/certs
      - deployment_controller_dev_kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elastic:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
        test: [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
          ]
        interval: 10s
        timeout: 10s
        retries: 60

  metricbeat:
    depends_on:
      elastic:
          condition: service_healthy
      kibana:
          condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: "root"
    container_name: deployment_controller_dev_metricbeat
    volumes:
      - deployment_controller_dev_escerts:/usr/share/metricbeat/certs
      - deployment_controller_dev_metricbeatdata:/usr/share/metricbeat/data
      - "./ekl/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
        - ELASTIC_USER=elastic
        - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        - ELASTIC_HOSTS=https://elastic:9200
        - KIBANA_HOSTS=http://kibana:5601
        - LOGSTASH_HOSTS=http://logstash:9600

  filebeat:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: deployment_controller_dev_filebeat
    user: root
    volumes:
      - deployment_controller_dev_escerts:/usr/share/filebeat/certs
      - deployment_controller_dev_filebeatdata:/usr/share/filebeat/data
      - "./ekl/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "./ekl/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elastic:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600

  logstash:
    depends_on:
      elastic:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: deployment_controller_dev_logstash
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - deployment_controller_dev_escerts:/usr/share/logstash/certs
      - deployment_controller_dev_logstashdata:/usr/share/logstash/data
      - "./ekl/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./ekl/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elastic:9200
  